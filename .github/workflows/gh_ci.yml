name: ci

on:
  push:
    branches: [master, main, dev*]
  pull_request:
    branches: [master, main, dev*]
    types:
      - opened
      - reopened
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build_test:
    name: Build and Test
    # if: "contains(github.event.head_commit.message, '[ci]')"
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python: ["3.9", "3.10"]
        os: [ubuntu-latest]
        python: ["3.10"]
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m pip install pytest pytest-cov

      - name: Build Package with Extension
        run: |
          python -m build
          python -m pip install --force-reinstall `find dist -name "*.whl"`
          rm -f dist/*.whl

      - name: Test using pytest
        id: testing
        continue-on-error: true
        run: |
          # python -m pytest --junitxml=pytest.xml | tee pytest-coverage.txt
          python -m pytest --junit-xml unit.xml --cov-report xml
      
      # - name: debugging
      #   run: |
      #     echo "-- COVERAGE --"
      #     cat coverage.xml
      #     echo "-- UNIT --"
      #     cat unit.xml

      - name: Test Reports
        if: github.event.pull_request
        uses: xportation/junit-coverage-report@v1.0.0
        with:
          junit-path: ./unit.xml  
          coverage-path: ./coverage.xml

      - name: Report Coverage
        shell: python
        run: |
          import os
          from coverage import Coverage
          cov = Coverage()
          cov.load()
          stmt_cov_to_display = int(cov.json_report())
          print(f"Statement Coverage: {stmt_cov_to_display}%")
          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
            env_file.write(f"STMT_COV={stmt_cov_to_display}%")

      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.4.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: dd3e15d244cda22f8a22b79ba575448d
          filename: gh_demo_ci.json
          label: coverage
          message: ${{ env.STMT_COV }}
          color: orange


  # publish_testpypi:
  #   name: Publish Python üêç sdist üì¶ to TestPyPI
  #   needs: build_test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: "3.10"

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         python -m pip install build

  #     - name: Build sdist Package with Extension
  #       run: |
  #         python -m build -s

  #     - name: Publish package to TestPyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.TEST_PYPI_API_TOKEN }}
  #         repository_url: https://test.pypi.org/legacy/
  #         skip_existing: true
  #         print_hash: true
